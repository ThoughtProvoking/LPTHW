# evaluates left operand, if false, false is returned.
# else, evaluates right operand and returns its value.
and

# assigns variable name to with-resource
as

# check if expression is true
assert

# exits for-loop or while-loop
break

# denote that following code block is a class
class

# skip the rest of the current loop iteration and start the next
continue

# denote that following code block is a function
def

# delete the given items from the dictionary
del

# allows for more explicit conditions after the if, more than two branches
elif

# if all if and elif expressions are false,
# and else block is present, else block is executed
else

# if specified error occurs, execute the following code block
except

# function that executes given string as Python code
exec()

# regardless of what happens in try-except block, finally clause is always executed
finally

# iterates over items of a collection
for

# import specific part of a module
from

# give variable global-scope
global

# executes following code block, only if given expression is true
if

# imports specified module so file can access it
import

# check if item is contained in a collection, and
# another way of iterating over a collection using for-loop
in

# tests for object identity, expression only true if same object
is

# create a function without giving it a name
lambda

# returns the opposite boolean value of the following expression
not

# evaluates left operand, if true, true is returned
# else, evaluates right operand and returns its value
or

# no-op, usually a placeholder for future code
pass

# prints given string to a stream or, by default, standard output
print

# throw own exception, or re-raise previous active exception
raise

# exits the function and gives following value back to caller
return

# evaluate this block, if exception occurs, go to except block
try

# if expression true, repeat execution of code block
while

# executes following code block with a resource and automatically
# cleans up the resouce afterwards, ex. opened files
with

# in a function with a yield, it becomes a generator.
# in a generator, it can look like a function, but once it hits a yield,
# the state of the function ia frozen and and it returns to the caller
# with a value. After the caller calls next(), it jumps back into the 
# generator where it left off (at the yield) and resumes until the next yield.
yield

# boolean true
True

# boolean false
False

# nothing, no value, null
None

# bytes of things (PNG, file, text, etc.); b"" or b''
bytes

# string: text, sentences, words, etc.
str

# integers
int

# decimal numbers
float

# collection of things, [1,2,3,4]
list

# key=value mapping of things, {'x':1, 'y':2}
dict

# arithmetic addition, or string concatenation
+

# arithmetic subtraction
-

# arithmetic multiplcation, or string multiplication
*

# exponentiation
**

# arithmetic division, keep decimal
/

# floor division, round quotient down to nearest integer
//

# modulus
%

# less than
<

# greater than
>

# less than equal
<=

# greater than equal
>=

# equal
==

# not equal
!=

# parentheses, used by functions to enclose arguments/parameters
()

# list brackets, used to enclose list elements
[]

# dict braces, used to enclose dict key=value mappings
{}

# receives a function as parameter, and returns a modified version of 
# the function, which includes calling the original
@(decorators)

# used to separate function arguments, parameters, and variables
,

# singles start of indented code block
:

# used for calling a object's methods or instance variables (dot notation)
.

# value assignment
=

# optional statement termination
;

# addition and assign back to itself
+=

# subtraction and assign back to itself
-=

# multiplication and assign back to itself
*=

# division and assign back to itself
/=

# floor division and assign back to itself
//=

# modulus and assign back to itself
%=

# exponentiation and assign back to itself
**=
